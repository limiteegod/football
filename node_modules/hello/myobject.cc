#include <node.h>
#include "myobject.h"

using namespace v8;

Persistent<Function> MyObject::constructor;

MyObject::MyObject(double value):value_(value) {
}

MyObject::~MyObject()
{
}

void MyObject::Init(Handle<Object> exports)
{
    Local<FunctionTemplate> tpl = FunctionTemplate::New(New);
    tpl->SetClassName(String::NewSymbol("MyObject"));
    tpl->InstanceTemplate()->SetInternalFieldCount(1);
    tpl->PrototypeTemplate()->Set(String::NewSymbol("plusOne"), FunctionTemplate::New(PlusOne)->GetFunction());
    tpl->PrototypeTemplate()->Set(String::NewSymbol("add"), FunctionTemplate::New(Add)->GetFunction());
    constructor = Persistent<Function>::New(tpl->GetFunction());
    exports->Set(String::NewSymbol("MyObject"), constructor);
}

Handle<Value> MyObject::New(const Arguments& args)
{
    HandleScope scope;
    if(args.IsConstructCall()){
        double value = args[0]->IsUndefined()?0:args[0]->NumberValue();
        MyObject * obj = new MyObject(value);
        obj->Wrap(args.This());
        return args.This();
    }
    else
    {
        const int argc = 1;
        Local<Value> argv[argc] = {args[0]};
        return scope.Close(constructor->NewInstance(argc, argv));
    }
}

Handle<Value> MyObject::PlusOne(const Arguments& args)
{
    HandleScope scope;
    MyObject *obj = ObjectWrap::Unwrap<MyObject>(args.This());
    obj->value_ += 1;
    return scope.Close(Number::New(obj->value_));
}

double MyObject::GetValue() const
{
    return value_;
}


/**
 * 把两个对象相加，返回一个新的对象
 */
Handle<Value> MyObject::Add(const Arguments& args)
{
    HandleScope scope;
    MyObject *obj = ObjectWrap::Unwrap<MyObject>(args.This());
    MyObject *obj2 = ObjectWrap::Unwrap<MyObject>(args[0]->ToObject());
    const unsigned argc = 1;
    double sum = obj->GetValue() + obj2->GetValue();
    Handle<Value> argv[argc] = {Local<Value>::New(Number::New(sum))};
    Local<Object> instance = constructor->NewInstance(argc, argv);
    return scope.Close(instance);
}

/**
 * Init方法中已经初始化过constructor变量，所以在这儿可以使用
 * constructor来新建一个对象。
 */
Handle<Value> MyObject::NewInstance(const Arguments& args)
{
    HandleScope scope;
    const unsigned argc = 1;
    Handle<Value> argv[argc] = {args[0]};
    Local<Object> instance = constructor->NewInstance(argc, argv);
    return scope.Close(instance);
}
