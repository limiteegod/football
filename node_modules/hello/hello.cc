#include <node.h>
#include <node_buffer.h>
#include <v8.h>

#include <cstdlib>
#include <ctime>
#include <string.h>

#include "myobject.h"

using namespace v8;

/**
 * 最简单的返回world字符串的例子
 **/
Handle<Value> Method(const Arguments& args) {
    HandleScope scope;
    return scope.Close(String::New("world"));
}

/**
 * 生成随机数，c的标准库也可以使用
 **/
Handle<Value> Random(const Arguments& args) {
    HandleScope scope;
    return scope.Close(Integer::New(rand()));
}

/**
 * 在v8中，c的基本数据类型还是一样可用
 **/
Handle<Value> Add(const Arguments& args) {
    HandleScope scope;

    //校验参数的长度
    if (args.Length() < 2) {
        ThrowException(Exception::TypeError(String::New("Wrong number of arguments")));
        return scope.Close(Undefined());
    }
    //校验参数的类型
    if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
        ThrowException(Exception::TypeError(String::New("Wrong arguments")));
        return scope.Close(Undefined());
    }

    int sum = 0;
    for(int i = args[0]->NumberValue(); i < args[1]->NumberValue(); i++)
    {
        sum += i;
    }
    Local<Number> num = Number::New(sum);
    return scope.Close(num);
}

/**
 * 调用js中传递过来的function，并设置第一个参数为String类型
 *
 **/
Handle<Value> RunCb(const Arguments& args)
{
    HandleScope scope;
    Local<Function> cb = Local<Function>::Cast(args[0]);
    const unsigned argc = 1;
    Local<Value> argv[argc] = { Local<Value>::New(String::New("hello world")) };
    cb->Call(Context::GetCurrent()->Global(), argc, argv);
    return scope.Close(Undefined());
}

/**
 * 创建一个新的对象，并返回给js
 *
 */
Handle<Value> CreateObject(const Arguments& args)
{
    HandleScope scope;
    Local<Object> obj = Object::New();
    obj->Set(String::NewSymbol("msg"), args[0]->ToString());
    return scope.Close(obj);
}

/**
 * 对象工厂
 *
 */
Handle<Value> CreateMyObject(const Arguments& args)
{
    HandleScope scope;
    return scope.Close(MyObject::NewInstance(args));
}

Handle<Value> CreateBuffer(const Arguments& args)
{
    HandleScope scope;
    const char *data = "hello world";
    Handle<String> str = String::New(data);
    Handle<Value> buf = node::Buffer::New(str);
    return scope.Close(buf);
    /*HandleScope scope;
    const char *data = "hello world";
    int length = strlen(data);
    node::Buffer* buf = node::Buffer::New(data, length);
    Handle<Object> fastBuf = Object::New();
    buf->makeFastBuffer(buf, fastBuf, 0, length);
    return scope.Close(fastBuf);*/
}


void init(Handle<Object> exports) {
    exports->Set(String::NewSymbol("hello"), FunctionTemplate::New(Method)->GetFunction());

    exports->Set(String::NewSymbol("add"), FunctionTemplate::New(Add)->GetFunction());

    exports->Set(String::NewSymbol("random"), FunctionTemplate::New(Random)->GetFunction());

    exports->Set(String::NewSymbol("runCb"), FunctionTemplate::New(RunCb)->GetFunction());

    exports->Set(String::NewSymbol("createObject"), FunctionTemplate::New(CreateObject)->GetFunction());

    exports->Set(String::NewSymbol("createBuffer"), FunctionTemplate::New(CreateBuffer)->GetFunction());

    MyObject::Init(exports);

    exports->Set(String::NewSymbol("createMyObject"), FunctionTemplate::New(CreateMyObject)->GetFunction());
}

NODE_MODULE(hello, init)
