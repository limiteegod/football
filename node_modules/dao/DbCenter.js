var async = require('async');

var esdb = require('easy_db');
var Database = esdb.Database;
var Table = esdb.Table;
var Column = esdb.Column;

var config = require('config');
var prop = config.prop;

var esut = require('easy_util');
var log = esut.log;

var DbCenter = function(){
    var self = this;
};

DbCenter.prototype.init = function(cb)
{
    var self = this;
    esdb.log.setShowLog(true);
    async.waterfall([
        //the mysql
        function(cb){
            self._initMain(function(err){
                cb(err);
            });
        },
        //the mongodb
        function(cb){
            self._initMg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype.check = function(cb)
{
    var self = this;
    async.waterfall([
        //check the mysql
        function(cb){
            self._checkMain(function(err){
                cb(err);
            });
        },
        //check the mongodb
        function(cb){
            self._checkMg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype._initMg = function(cb)
{
    var self = this;
    var db = new Database(prop.mg);

    //add tables
    var uniqueIdTable = new Table(db, "uniqueId", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false)
    ]);
    db.put(uniqueIdTable);
    var stInfoTable = new Table(db, "stInfo", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "st", "varchar", 32, false, undefined),
        new Column(db, "lastActiveTime", "bigint", -1, false, undefined)
    ]);
    db.put(stInfoTable);

    self.mg = db;
    self.mg.init(cb);
};

DbCenter.prototype._checkMg = function(cb)
{
    var self = this;
    cb(null);
};

DbCenter.prototype._checkMain = function(cb)
{
    var self = this;
    var userTable = self.main.get("user");
    var admin = {id:"admin", password:"123456", type:prop.userType.ADMIN};
    userTable.findOne({id:admin.id}, {}, [], function(err, data){
        log.info(err);
        if(err)
        {
            cb(err);
        }
        else
        {
            if(!data)
            {
                userTable.save(admin, [], function(err, data){
                    cb(null);
                });
            }
            else
            {
                cb(null);
            }
        }
    });
};

DbCenter.prototype._initMain = function(cb)
{
    var self = this;
    var db = new Database(prop.main);

    //add tables
    var area = new Table(db, "area", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(area);
    var league = new Table(db, "league", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "areaId", "varchar", 80, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(league);
    var stage = new Table(db, "stage", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "code", "int", 11, false, undefined),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "leagueId", "varchar", 80, false, undefined),
        new Column(db, "seasonId", "varchar", 80, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(stage);
    var user = new Table(db, "user", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "password", "varchar", 80, false, undefined),
        new Column(db, "type", "int", 11, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(user);
    var season = new Table(db, "season", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(season);
    var team = new Table(db, "team", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "areaId", "varchar", 80, false, undefined),
        new Column(db, "des", "varchar", 400, false, ''),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(team);
    var term = new Table(db, "term", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "gameCode", "varchar", 20, false, undefined),
        new Column(db, "code", "varchar", 40, false, undefined),
        new Column(db, "nextCode", "varchar", 40, false, undefined),
        new Column(db, "hostTeamId", "varchar", 80, false, undefined),
        new Column(db, "guestTeamId", "varchar", 80, false, undefined),
        new Column(db, "stageId", "varchar", 80, false, undefined),
        new Column(db, "concede", "int", 11, false, 0),
        new Column(db, "openTime", "date", -1, false, undefined),
        new Column(db, "closeTime", "date", -1, false, undefined),
        new Column(db, "matchTime", "date", -1, false, undefined),
        new Column(db, "status", "int", 11, false, -1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(term);
    var operation = new Table(db, "operation", [
        new Column(db, "id", "varchar", 40, false, undefined),
        new Column(db, "userType", "int", 11, false, undefined),
        new Column(db, "hasChildren", "int", 11, false, 0),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "parent", "varchar", 40, false, ''),
        new Column(db, "url", "varchar", 80, false, undefined),
        new Column(db, "status", "int", 11, false, 1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(operation);
    var jmatch = new Table(db, "jmatch", [
        new Column(db, "id", "bigint", 80, false, undefined, true, true),
        new Column(db, "hostTeamId", "varchar", 80, false, undefined),
        new Column(db, "guestTeamId", "varchar", 80, false, undefined),
        new Column(db, "stageId", "varchar", 80, false, undefined),
        new Column(db, "concede", "int", 11, false, 0), //让球
        new Column(db, "bigSep", "int", 11, false, 0),  //大小球分界线
        new Column(db, "matchTime", "date", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(jmatch);
    self.main = db;
    self.main.init(cb);
};

module.exports = new DbCenter();

